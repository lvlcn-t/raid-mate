// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: credentials.sql

package repo

import (
	"context"
)

const getCredentials = `-- name: GetCredentials :one
SELECT id,
    guild_id,
    name,
    url,
    username,
    password
FROM credentials
WHERE guild_id = $1
    AND name = $2
`

type GetCredentialsParams struct {
	GuildID int64
	Name    string
}

func (q *Queries) GetCredentials(ctx context.Context, arg GetCredentialsParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, getCredentials, arg.GuildID, arg.Name)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.Name,
		&i.Url,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const setCredentials = `-- name: SetCredentials :exec
INSERT INTO credentials (guild_id, name, url, username, password)
VALUES ($1, $2, $3, $4, $5) ON CONFLICT (guild_id, name) DO
UPDATE
SET url = EXCLUDED.url,
    username = EXCLUDED.username,
    password = EXCLUDED.password
RETURNING id, guild_id, name, url, username, password
`

type SetCredentialsParams struct {
	GuildID  int64
	Name     string
	Url      string
	Username string
	Password string
}

func (q *Queries) SetCredentials(ctx context.Context, arg SetCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, setCredentials,
		arg.GuildID,
		arg.Name,
		arg.Url,
		arg.Username,
		arg.Password,
	)
	return err
}
