// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: guild.sql

package repo

import (
	"context"
)

const countGuilds = `-- name: CountGuilds :one
SELECT COUNT(*)
FROM guilds
`

func (q *Queries) CountGuilds(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGuilds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteGuild = `-- name: DeleteGuild :exec
DELETE FROM guilds
WHERE id = $1
`

func (q *Queries) DeleteGuild(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGuild, id)
	return err
}

const fuzzyGuildSearch = `-- name: FuzzyGuildSearch :many
SELECT id, name, server_name, server_region, server_realm
FROM guilds
WHERE similarity(name, $1) > 0.15
`

func (q *Queries) FuzzyGuildSearch(ctx context.Context, similarity interface{}) ([]Guild, error) {
	rows, err := q.db.QueryContext(ctx, fuzzyGuildSearch, similarity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ServerName,
			&i.ServerRegion,
			&i.ServerRealm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuild = `-- name: GetGuild :one
SELECT id,
    name,
    server_name,
    server_region,
    server_realm
FROM guilds
WHERE id = $1
`

func (q *Queries) GetGuild(ctx context.Context, id int64) (Guild, error) {
	row := q.db.QueryRowContext(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ServerName,
		&i.ServerRegion,
		&i.ServerRealm,
	)
	return i, err
}

const listGuilds = `-- name: ListGuilds :many
SELECT id,
    name,
    server_name,
    server_region,
    server_realm
FROM guilds
`

func (q *Queries) ListGuilds(ctx context.Context) ([]Guild, error) {
	rows, err := q.db.QueryContext(ctx, listGuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ServerName,
			&i.ServerRegion,
			&i.ServerRealm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newGuild = `-- name: NewGuild :exec
INSERT INTO guilds (
        id,
        name,
        server_name,
        server_region,
        server_realm
    )
VALUES ($1, $2, $3, $4, $5)
`

type NewGuildParams struct {
	ID           int64
	Name         string
	ServerName   string
	ServerRegion string
	ServerRealm  string
}

func (q *Queries) NewGuild(ctx context.Context, arg NewGuildParams) error {
	_, err := q.db.ExecContext(ctx, newGuild,
		arg.ID,
		arg.Name,
		arg.ServerName,
		arg.ServerRegion,
		arg.ServerRealm,
	)
	return err
}

const updateGuild = `-- name: UpdateGuild :exec
UPDATE guilds
SET name = $1,
    server_name = $2,
    server_region = $3,
    server_realm = $4
WHERE id = $5
RETURNING id, name, server_name, server_region, server_realm
`

type UpdateGuildParams struct {
	Name         string
	ServerName   string
	ServerRegion string
	ServerRealm  string
	ID           int64
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) error {
	_, err := q.db.ExecContext(ctx, updateGuild,
		arg.Name,
		arg.ServerName,
		arg.ServerRegion,
		arg.ServerRealm,
		arg.ID,
	)
	return err
}
